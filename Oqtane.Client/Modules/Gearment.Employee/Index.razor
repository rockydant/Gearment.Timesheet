@using Gearment.Employee.Services
@using Gearment.Employee.Models
@using Gearment.Department.Models
@using Gearment.GearmentSetting.Services
@using Syncfusion.Blazor.Data

@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

@namespace Gearment.Employee
@inherits ModuleBase
@inject IEmployeeService EmployeeService
@inject IGearmentSettingService GearmentSettingService
@inject NavigationManager NavigationManager

<div class="form-group row">
    <div class="col-lg-12">
        <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Employee" />
        <SfButton class="btn btn-info" @onclick="@OnRateButtonClick">Update Rate</SfButton>
        <SfButton class="btn btn-success" @onclick="@OnDepartmentButtonClick">Update Department</SfButton>
        <ActionLink Action="Upload" class="btn btn-info" Text="Import" Parameters="@($"id=" + _folderId.ToString())" ResourceKey="UploadFiles" />
        <SfButton OnClick="ExcelExport" class="btn btn-primary" Content="Export"></SfButton>
    </div>
</div>

<SfDialog Width="335px" Target="#target" IsModal="true" @bind-Visible="RateDialogEnable">
    <DialogTemplates>
        <Header> Rate Update </Header>
        <Content>
            <div class="form-group row">
                <label for="text" class="col-2 col-form-label">Rate</label>
                <div class="col-10">
                    <div class="input-group">
                        <SfNumericTextBox TValue="double" @bind-Value="@_rate" Format="c2" Step="0.5" FloatLabelType="@FloatLabelType.Never"></SfNumericTextBox>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@OnRateDialogSaveButtonClick" />
        <DialogButton Content="Cancel" OnClick="@OnCancelButtonClick" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>
<SfDialog Width="335px" Target="#target" IsModal="true" @bind-Visible="DeptDialogEnable">
    <DialogTemplates>
        <Header> Department Update </Header>
        <Content>
            <div class="form-group row">
                <label for="text" class="col-2 col-form-label">Dept.</label>
                <div class="col-10">
                    <div class="input-group">
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" @bind-Value="@_department" Placeholder="Select department" DataSource="@departmentList">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@OnDeptDialogSaveButtonClick" />
        <DialogButton Content="Cancel" OnClick="@OnCancelButtonClick" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>
<br />

<div class="col-lg-12 control-section">
    <div class="row">
        <SfGrid DataSource="@Employees" @ref="Grid" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="Toolbaritems">
            <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
            <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
            <GridEvents RowSelected="GetSelectedRecords" TValue="Employee"></GridEvents>
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Type="ItemType.Input">
                        <Template>
                            <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="Filter by department" DataSource="@departmentListFilter" @bind-Value="@departmentFilter">
                                <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Type="ItemType.Input">
                        <Template>
                            <SfCheckBox Label="Active" @bind-Checked="isActive" @onchange="onChange"></SfCheckBox>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>

            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
                <GridColumn Field=@nameof(Employee.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                <GridColumn Field=@nameof(Employee.PayrollID) HeaderText="Payroll ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Employee.Rate) HeaderText="Rate" Format="C2" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(Employee.Department) HeaderText="Dept." TextAlign="TextAlign.Left" Width="120">

                </GridColumn>
                <GridColumn Field=@nameof(Employee.StartDate) HeaderText="Start Date" Format="d" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Employee.Status) HeaderText="Status" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(Employee.Note) HeaderText="Note" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                <GridColumn HeaderText="Fixed Salary" TextAlign="TextAlign.Center" Width="120">
                    <Template>
                        @{ var employee = (context as Employee);
                            if (employee.IsFixedSalary == 1)
                            {


                                <input type="checkbox" disabled checked data-toggle="toggle">
                            }
                            else
                            {
                                <input type="checkbox" disabled data-toggle="toggle">
                            }
                        }
                    </Template>
                </GridColumn>

                <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="120">
                    <Template>
                        @{ var employee = (context as Employee);
                            <td><ActionLink Action="Edit" Parameters="@($"id=" + employee.EmployeeId.ToString())" /></td>
                            <td><ActionDialog Header="Delete Employee" Message="@("Are You Sure You Wish To Delete The " + employee.Name + " Employee?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(employee))" /></td>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
<br />
<br />

@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    public List<Employee> Employees { get; set; }
    private bool RateDialogEnable { get; set; } = false;
    private bool DeptDialogEnable { get; set; } = false;

    private bool isActive = true;
    private string departmentFilter = "All";
    private List<Object> Toolbaritems = new List<Object>() { "Search" };
    SfGrid<Employee> Grid;
    List<Employee> selectedEmployees = new List<Employee>();
    double _rate = 14;
    private int _folderId = 1;
    List<DepartmentViewModel> departmentList = new List<DepartmentViewModel>();
    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };

    string _department = "tshirt";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshGrid();
            departmentList = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);
            departmentListFilter.AddRange(departmentList);

            var settingConfig = await GearmentSettingService.GetGearmentSettingsAsync(ModuleState.ModuleId);
            var minWage = settingConfig.FirstOrDefault(x => x.Name == "min-wage");
            if (minWage != null)
            {
                _rate = double.Parse(minWage.Value);
            }

        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Employee {Error}", ex.Message);
            AddModuleMessage("Error Loading Employee", MessageType.Error);
        }
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<Employee> args)
    {
        var selectedRecordIndexes = await Grid.GetSelectedRowIndexes();
        foreach (var index in selectedRecordIndexes)
        {
            selectedEmployees.Add(Grid.DataSource.ToList()[(int)index]);
        }

        StateHasChanged();
    }

    private async Task Delete(Employee Employee)
    {
        try
        {
            await EmployeeService.DeleteEmployeeAsync(Employee.EmployeeId, ModuleState.ModuleId);
            await logger.LogInformation("Employee Deleted {Employee}", Employee);
            await RefreshGrid();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Employee {Employee} {Error}", Employee, ex.Message);
            AddModuleMessage("Error Deleting Employee", MessageType.Error);
        }
    }

    private async Task Update(List<Employee> Employees)
    {
        try
        {
            //selectedEmployees.ForEach(x => x.Rate = _rate);
            //await EmployeeService.UpdateEmployeesAsync(selectedEmployees);

            foreach (var employee in Employees)
            {
                await EmployeeService.UpdateEmployeeAsync(employee);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Updating Employee List {Employees} {Error}", Employees, ex.Message);
            AddModuleMessage("Error Updating Employee", MessageType.Error);
        }
    }

    private void OnRateButtonClick()
    {
        RateDialogEnable = true;
    }

    private void OnDepartmentButtonClick()
    {
        DeptDialogEnable = true;
    }

    private void OnCancelButtonClick()
    {
        RateDialogEnable = false;
        DeptDialogEnable = false;
    }

    private async Task RefreshGrid()
    {
        Employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
        Employees = Employees.FindAll(x => x.Status == "Active");
    }

    private async Task OnRateDialogSaveButtonClick()
    {
        selectedEmployees.ForEach(x => x.Rate = (decimal)_rate);
        await Update(selectedEmployees);
        await RefreshGrid();

        RateDialogEnable = false;
    }

    private async Task OnDeptDialogSaveButtonClick()
    {
        selectedEmployees.ForEach(x => x.Department = _department);
        await Update(selectedEmployees);
        await RefreshGrid();

        DeptDialogEnable = false;
    }

    public async Task ExcelExport()
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.DataSource = Employees;

        ExcelProperties.FileName = "EmployeeInfo.xlsx";

        await this.Grid.ExcelExport(ExcelProperties);
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        if (args.Value == "All")
        {
            await RefreshGrid();
        }
        else
        {
            Employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
            string temp = isActive ? "Active" : "InActive";
            if (isActive)
            {
                Employees = Employees.FindAll(x => x.Department.Contains(args.Value) && x.Status == "Active");
            }
            else
            {
                Employees = Employees.FindAll(x => x.Department.Contains(args.Value));
            }

        }
    }

    private async Task onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        Employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);

        if (departmentFilter != "All")
        {
            Employees = Employees.FindAll(x => x.Department.Contains(departmentFilter));
        }


        if (isActive)
        {
            Employees = Employees.FindAll(x => x.Status == "Active");
        }

    }
}
