@using Gearment.EmployeeSchedule.Services
@using Gearment.EmployeeSchedule.Models

@namespace Gearment.EmployeeSchedule
@inherits ModuleBase
@inject IEmployeeScheduleService EmployeeScheduleService
@inject NavigationManager NavigationManager

@if (_EmployeeSchedules == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add EmployeeSchedule" />
    <br />
    <br />
    @if (@_EmployeeSchedules.Count != 0)
    {
        <Pager Items="@_EmployeeSchedules">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>Name</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.EmployeeScheduleId.ToString())" /></td>
                <td><ActionDialog Header="Delete EmployeeSchedule" Message="@("Are You Sure You Wish To Delete The " + context.Name + " EmployeeSchedule?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>No EmployeeSchedules To Display</p>
    }
}

<!-- The content below is for informational purposes only and can be safely removed -->

<hr />
EmployeeSchedule Module Created Successfully. Use Edit Mode To Add A EmployeeSchedule. You Can Access The Files At The Following Locations:<br /><br />
C:\WORKSPACE\Gearment\TIMESHEET\oqtane.framework-dev\oqtane.framework-dev\Oqtane.Client\Modules\EmployeeSchedule\<br />
- Edit.razor - component for adding or editing content<br />
- Index.razor - main component for your module **the content you are reading is in this file**<br />
- ModuleInfo.cs - implements IModule interface to provide configuration settings for your module<br />
- Settings.razor - component for managing module settings<br />
- Services\IEmployeeScheduleService.cs - interface for defining service API methods<br />
- Services\EmployeeScheduleService.cs - implements service API interface methods<br /><br />
C:\WORKSPACE\Gearment\TIMESHEET\oqtane.framework-dev\oqtane.framework-dev\Oqtane.Server\Modules\EmployeeSchedule\<br />
- Controllers\EmployeeScheduleController.cs - API methods implemented using a REST pattern<br />
- Manager\EmployeeScheduleManager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\IEmployeeScheduleRepository.cs - interface for defining repository methods<br />
- Repository\EmployeeScheduleRespository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\EmployeeScheduleContext.cs - provides a DB Context for data access<br />
- Scripts\Gearment.EmployeeSchedules.1.0.0.sql - database schema definition script<br />
- Scripts\Gearment.EmployeeSchedules.Uninstall.sql - database uninstall script<br /><br />
C:\WORKSPACE\Gearment\TIMESHEET\oqtane.framework-dev\oqtane.framework-dev\Oqtane.Shared\Modules\EmployeeSchedule\<br />
- Models\EmployeeSchedule.cs - model definition<br /><br />

<!-- The content above is for informational purposes only and can be safely removed -->

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<EmployeeSchedule> _EmployeeSchedules;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _EmployeeSchedules = await EmployeeScheduleService.GetEmployeeSchedulesAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading EmployeeSchedule {Error}", ex.Message);
            AddModuleMessage("Error Loading EmployeeSchedule", MessageType.Error);
        }
    }

    private async Task Delete(EmployeeSchedule EmployeeSchedule)
    {
        try
        {
            await EmployeeScheduleService.DeleteEmployeeScheduleAsync(EmployeeSchedule.EmployeeScheduleId, ModuleState.ModuleId);
            await logger.LogInformation("EmployeeSchedule Deleted {EmployeeSchedule}", EmployeeSchedule);
            _EmployeeSchedules = await EmployeeScheduleService.GetEmployeeSchedulesAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting EmployeeSchedule {EmployeeSchedule} {Error}", EmployeeSchedule, ex.Message);
            AddModuleMessage("Error Deleting EmployeeSchedule", MessageType.Error);
        }
    }
}