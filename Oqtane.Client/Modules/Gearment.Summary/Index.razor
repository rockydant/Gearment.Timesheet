@using Gearment.Summary.Services
@using Gearment.Department.Services
@using Gearment.Employee.Services
@using Gearment.Timesheet.Services

@using Gearment.Summary.Models
@using Gearment.Department.Models
@using Gearment.Employee.Models;
@using Gearment.Timesheet.Models;

@namespace Gearment.Summary
@inherits ModuleBase
@inject ISummaryService SummaryService
@inject IDepartmentService DepartmentService
@inject IEmployeeService EmployeeService
@inject ITimesheetService TimesheetService

@inject NavigationManager NavigationManager


<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-info elevation-1"><i class="fa fa-sitemap"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Departments</span>
                        <span class="info-box-number">
                            @_Departments.Count
                        </span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-users"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Employees (Active)</span>
                        <span class="info-box-number">@_Employees.Count</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <!-- fix for small devices only -->
            <div class="clearfix hidden-md-up"></div>

            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-success elevation-1"><i class="fas fa-cogs"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Total Working Hours</span>
                        <span class="info-box-number">@_totalWorkingHours</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-warning elevation-1"><i class="fas fa-users"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">New Employee (within a week)</span>
                        <span class="info-box-number">@_LatestEmployees.Count</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
        <!-- /.row -->
        <!-- Main row -->
        <div class="row">
            <!-- Left col -->
            <div class="col-md-12">
                <!-- /.card -->
                <div class="row">
                    <div class="col-md-6">
                        <!-- USERS LIST -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">Latest Employee</h3>
                            </div>
                            <!-- /.card-header -->
                            <div class="card-body p-0">
                                <SfGrid DataSource="@_LatestEmployees" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true">
                                    <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                                    <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(Employee.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.Department) HeaderText="Dept." TextAlign="TextAlign.Left" Width="120"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.StartDate) HeaderText="Start Date" Format="d" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.Note) HeaderText="Note" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                                <!-- /.users-list -->
                            </div>
                            <!-- /.card-body -->
                            <div class="card-footer text-center">
                                <a href="/settings">View All Users</a>
                            </div>
                            <!-- /.card-footer -->
                        </div>
                        <!--/.card -->
                    </div>
                    <!-- /.col -->
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header border-transparent">
                                <h3 class="card-title">Department List</h3>

                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <button type="button" class="btn btn-tool" data-card-widget="remove">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <!-- /.card-header -->
                            <div class="card-body p-0">
                                <SfGrid DataSource="@_DepartmentList" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true">
                                    <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                                    <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(DepartmentList.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                                        <GridColumn Field=@nameof(DepartmentList.TotalEmployee) HeaderText="Total Employee" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                                <!-- /.users-list -->
                            </div>
                            <!-- /.card-body -->
                            <div class="card-footer text-center">
                                <a href="/settings">View All Departments</a>
                            </div>
                            <!-- /.card-footer -->
                        </div>
                    </div>

                </div>
                <!-- /.row -->
                <!-- TABLE: LATEST ORDERS -->
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Summary> _Summarys;
    List<DepartmentViewModel> _Departments = new List<DepartmentViewModel>();
    List<Employee> _Employees = new List<Employee>();
    List<TimesheetData> _Timesheets = new List<TimesheetData>();
    decimal _totalWorkingHours = 0;
    List<Employee> _LatestEmployees = new List<Employee>();
    List<DepartmentList> _DepartmentList = new List<DepartmentList>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShowProgressIndicator();

            _Departments = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);

            _Employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
            _Employees = _Employees.FindAll(x => x.Status == "Active");

            _LatestEmployees = _Employees.OrderByDescending(x => x.CreatedOn).Take(10).ToList();

            foreach (var item in _Employees)
            {
                if (_DepartmentList.Any(x => x.Name == item.Department))
                {
                    _DepartmentList.FirstOrDefault(x => x.Name == item.Department).TotalEmployee += 1;
                }
                else
                {
                    _DepartmentList.Add(new DepartmentList()
                    {
                        Name = item.Department,
                        TotalEmployee = 1
                    });
                }
            }

            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);

            foreach (var item in _Timesheets)
            {
                if (item.TotalWorkingHour > 0)
                {
                    _totalWorkingHours += item.TotalWorkingHour;
                }
            }

            HideProgressIndicator();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Summary {Error}", ex.Message);
            AddModuleMessage("Error Loading Summary", MessageType.Error);
        }
    }

    private async Task Delete(Summary Summary)
    {
        try
        {
            await SummaryService.DeleteSummaryAsync(Summary.SummaryId, ModuleState.ModuleId);
            await logger.LogInformation("Summary Deleted {Summary}", Summary);
            _Summarys = await SummaryService.GetSummarysAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Summary {Summary} {Error}", Summary, ex.Message);
            AddModuleMessage("Error Deleting Summary", MessageType.Error);
        }
    } }