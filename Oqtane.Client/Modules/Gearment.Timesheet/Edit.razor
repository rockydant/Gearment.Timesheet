@using Oqtane.Modules.Controls
@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Calendars

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager


<div class="form-group row">
    <strong class="col-2">Employee Name</strong>
    <label for="text" class="col-2 col-form-label">@_name</label>
    <strong class="col-2">Department</strong>
    <label for="text" class="col-2 col-form-label">@_department</label>
    <strong class="col-2">Payroll ID</strong>
    <label for="text" class="col-2 col-form-label">@_payrollID</label>
</div>
<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Start Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_dailyStartTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">End Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_dailyEndTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Break Start Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_breakStartTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Break End Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_breakEndTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
@if (PageState.Action == "Edit")
{
<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>}

@code { public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Timesheet";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _name = string.Empty;
    string _payrollID = string.Empty;
    string _createdby = string.Empty;
    string _date = string.Empty;
    string _department = string.Empty;
    DateTime _dailyStartTime = new DateTime();
    DateTime _dailyEndTime;
    DateTime _breakStartTime;
    DateTime _breakEndTime;

    public DateTime MinVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 06, 00, 00);
    public DateTime MaxVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 23, 00, 00);

    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                TimesheetData Timesheet = await TimesheetService.GetTimesheetAsync(_id, ModuleState.ModuleId);
                if (Timesheet != null)
                {
                    _name = Timesheet.FirstName + " " + Timesheet.LastName;
                    _date = Timesheet.Date;
                    _department = Timesheet.Department;
                    _dailyStartTime = Timesheet.DailyStartTime;
                    _dailyEndTime = Timesheet.DailyEndTime;
                    _breakStartTime = Timesheet.BreakStartTime;
                    _breakEndTime = Timesheet.BreakEndTime;

                    _createdby = Timesheet.CreatedBy;
                    _createdon = Timesheet.CreatedOn;
                    _modifiedby = Timesheet.ModifiedBy;
                    _modifiedon = Timesheet.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {TimesheetId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                //if (_dailyEndTime < _dailyStartTime || _breakEndTime < _breakStartTime || _breakEndTime > _dailyEndTime || _breakStartTime < _dailyStartTime)
                //    (TimeSpan.Compare(_dailyEndTime, _dailyStartTime)>)
                //{
                //    AddModuleMessage("Invalid Time Range", MessageType.Warning);
                //    return;
                //}

                TimesheetData Timesheet = await TimesheetService.GetTimesheetAsync(_id, ModuleState.ModuleId);
                Timesheet.DailyStartTime = _dailyStartTime;
                Timesheet.DailyEndTime = _dailyEndTime;
                Timesheet.BreakStartTime = _breakStartTime;
                Timesheet.BreakEndTime = _breakEndTime;
                Timesheet.TotalRestHour = (int)Math.Round((DateTime.Parse(Timesheet.BreakEndTime.ToString("H:mm")) - DateTime.Parse(Timesheet.BreakStartTime.ToString("H:mm"))).TotalMinutes / 60);
                Timesheet.TotalWorkingHour = (int)Math.Round((DateTime.Parse(Timesheet.DailyEndTime.ToString("H:mm")) - DateTime.Parse(Timesheet.DailyStartTime.ToString("H:mm"))).TotalMinutes / 60);

                Timesheet.ModifiedBy = PageState.User.Username;
                Timesheet.ModifiedOn = DateTime.Now;

                await TimesheetService.UpdateTimesheetAsync(Timesheet, ModuleState.ModuleId);
                await logger.LogInformation("Timesheet Updated {Timesheet}", Timesheet);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Saving Timesheet", MessageType.Error);
        }
    } }
