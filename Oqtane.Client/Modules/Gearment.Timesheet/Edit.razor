@using Oqtane.Modules.Controls
@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Lists
@using System.Text.Json
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager


<div class="form-group row">
    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
        <div class="alert alert-primary" role="alert">
            Employee Name <a href="#" class="alert-link"> @_name</a>. Department <a href="#" class="alert-link"> @_department</a>
        </div>
    </div>
</div>
<div class="form-group row">
    <label for="text" class="col-3 col-form-label">Event Type</label>
    <SfDropDownList CssClass="col-3 col-form-label" TValue="string" TItem="string" Placeholder="Event Type" DataSource="@EnumValues" Enabled="@IsAdded" @bind-Value="_eventType">
        <DropDownListFieldSettings Text="Name" Value="Code"></DropDownListFieldSettings>
    </SfDropDownList>
    <label for="text" class="col-3 col-form-label">Event Time</label>
    <div class="col-3">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_eventTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>


<br />
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code { public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Timesheet";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _name = string.Empty;
    string _payrollID = string.Empty;
    string _createdby = string.Empty;
    string _date = string.Empty;
    string _department = string.Empty;
    string _eventType = string.Empty;

    bool IsAdded;
    public string[] EnumValues = Enum.GetNames(typeof(Values));
    public Values eventTypeValue { get; set; }
    private Employee_FaceRegEventDetail eventDetail;

    public enum Values
    {
        In,
        Out,
        Break,
        EndBreak
    }

    DateTime _eventTime = new DateTime();

    public DateTime MinVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 06, 00, 00);
    public DateTime MaxVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 23, 00, 00);

    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _id = Int32.Parse(PageState.QueryString["id"]);
            eventDetail = await TimesheetService.GetAttendanceDataAsync(_id, ModuleState.ModuleId);

            if (eventDetail != null)
            {
                _name = eventDetail.Name;
                _eventType = eventDetail.EventType;
                _department = eventDetail.Department;
                _eventTime = eventDetail.EventTime;
            }

            if (PageState.Action == "Edit")
            {
                IsAdded = false;

                if (_eventType == "End-Break")
                {
                    eventTypeValue = Values.EndBreak;
                }
                else
                {
                    eventTypeValue = (Values)Enum.Parse(typeof(Values), _eventType);
                }
            }
            else
            {
                IsAdded = true;
                eventTypeValue = Values.In;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {TimesheetId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                var eventDetail = await TimesheetService.GetAttendanceDataAsync(_id, ModuleState.ModuleId);

                TimeSpan pickedTime = _eventTime.TimeOfDay;
                eventDetail.EventTime = eventDetail.EventTime.Date + pickedTime;

                await TimesheetService.UpdateAttendanceDataAsync(eventDetail, ModuleState.ModuleId);
                await logger.LogInformation("Event Updated {Timesheet}", eventDetail);
            }
            else
            {
                Employee_FaceRegEvent newEvent = new Employee_FaceRegEvent();

                TimeSpan pickedTime = _eventTime.TimeOfDay;
                newEvent.EventTime = eventDetail.EventTime.Date + pickedTime;

                newEvent.EventType = _eventType == "EndBreak" ? "End-Break" : _eventType;

                newEvent.EmployeeId = eventDetail.EmployeeId;

                await TimesheetService.AddAttendanceDataAsync(newEvent, ModuleState.ModuleId);
                await logger.LogInformation("Event Updated {Timesheet}", eventDetail);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Saving Timesheet", MessageType.Error);
        }
    }

    private string ConvertToNotes(ObservableCollection<BreakTimes> breakTimeList)
    {
        return System.Text.Json.JsonSerializer.Serialize(breakTimeList);
    } }
