@using Oqtane.Modules.Controls
@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Lists
@using System.Text.Json
@using Syncfusion.Blazor.Buttons

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager


<div class="form-group row">
    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
        <div class="alert alert-primary" role="alert">
            Employee Name <a href="#" class="alert-link"> @_name</a>. Department <a href="#" class="alert-link"> @_department</a>
        </div>
    </div>
</div>
<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Start Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_dailyStartTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">End Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_dailyEndTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Break Start Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_breakStartTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>

<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Break End Time</label>
    <div class="col-10">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_breakEndTime" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
</div>
<div class="form-group row">
    <label for="text" class="col-2 col-form-label">Extra Break Start Time</label>
    <div class="col-3">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_extraBreakStart" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
    <label for="text" class="col-2 col-form-label">Extra Break End Time</label>
    <div class="col-3">
        <div class="input-group">
            <SfTimePicker TValue="DateTime" @bind-Value="@_extraBreakEnd" Format="HH:mm" Min="@MinVal" Max="@MaxVal"></SfTimePicker>
        </div>
    </div>
    <button type="button" class="col-2 btn btn-success" @onclick="Add">+</button>
</div>

<SfListView Id="BreakHistoryListView"
            DataSource="@_breaksTimeList"
            HeaderTitle="Break History"
            ShowHeader="true"
            CssClass="e-list-template"
            Width="350"
            SortOrder="Syncfusion.Blazor.Lists.SortOrder.Ascending">
    <ListViewFieldSettings TValue="BreakTimes" Id="Id" Text="ID"></ListViewFieldSettings>
    <ListViewTemplates TValue="BreakTimes">
        <Template>
            <div class="e-list-wrapper e-list-multi-line e-list-avatar">
                @{ var currentBreakTime = (context as BreakTimes);
<span>From </span> @(currentBreakTime.From.TimeOfDay) <span>To </span> @(currentBreakTime.To.TimeOfDay    )
                    <SfButton OnClick="@(async () => await Remove(currentBreakTime.Id))" class="btn btn-danger" Content="Remove"></SfButton> }
            </div>
        </Template>
    </ListViewTemplates>
</SfListView>

@*<div class="form-group row">
        <SfListView DataSource="@_breaksTimeList">
            <ListViewTemplates TValue="BreakTimes">
                <Template>
                    @{ var currentBreakTime = (context as BreakTimes);
    <span>From </span>
    @(currentBreakTime.From.TimeOfDay)
                        <span>To </span>
                        @(currentBreakTime.To.TimeOfDay)
                                            <button type="button" class="col-2 link btn-success" >-</button> }
                </Template>
            </ListViewTemplates>
        </SfListView>
    </div>*@

<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
@if (PageState.Action == "Edit")
{
<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>}

@code { public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Timesheet";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    SfListView<BreakTimes> BreakHistoryListView;
    int _id;
    string _name = string.Empty;
    string _payrollID = string.Empty;
    string _createdby = string.Empty;
    string _date = string.Empty;
    string _department = string.Empty;
    DateTime _dailyStartTime = new DateTime();
    DateTime _dailyEndTime;
    DateTime _breakStartTime;
    DateTime _breakEndTime;
    DateTime _extraBreakStart;
    DateTime _extraBreakEnd;
    List<BreakTimes> _breaksTimeList;
    decimal _totalExtraBreak = 0;

    public DateTime MinVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 06, 00, 00);
    public DateTime MaxVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15, 23, 00, 00);

    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                TimesheetData Timesheet = await TimesheetService.GetTimesheetAsync(_id, ModuleState.ModuleId);
                if (Timesheet != null)
                {
                    _name = Timesheet.FirstName + " " + Timesheet.LastName;
                    _date = Timesheet.Date;
                    _department = Timesheet.Department;
                    _dailyStartTime = Timesheet.DailyStartTime;
                    _dailyEndTime = Timesheet.DailyEndTime;
                    _breakStartTime = Timesheet.BreakStartTime;
                    _breakEndTime = Timesheet.BreakEndTime;

                    _extraBreakStart = Timesheet.BreakStartTime;
                    _extraBreakEnd = Timesheet.BreakEndTime;

                    _createdby = Timesheet.CreatedBy;
                    _createdon = Timesheet.CreatedOn;
                    _modifiedby = Timesheet.ModifiedBy;
                    _modifiedon = Timesheet.ModifiedOn;

                    _totalExtraBreak = Timesheet.TotalBreakHour;

                    _breaksTimeList = new List<BreakTimes>();
                    _breaksTimeList = ConvertBreakTimeList(Timesheet.Notes);

                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {TimesheetId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private List<BreakTimes> ConvertBreakTimeList(string notes)
    {
        if (!string.IsNullOrEmpty(notes))
        {
            _breaksTimeList = System.Text.Json.JsonSerializer.Deserialize<List<BreakTimes>>(notes);
        }

        return _breaksTimeList;
    }

    private void Add()
    {
        BreakTimes breakTime = new BreakTimes();
        breakTime.Id = Guid.NewGuid();
        breakTime.From = _extraBreakStart;
        breakTime.To = _extraBreakEnd;

        _breaksTimeList.Add(breakTime);
        _totalExtraBreak += Math.Round((decimal)((_extraBreakEnd - _extraBreakStart).TotalMinutes / 60), 2);
    }

    private async Task Remove(Guid Id)
    {
        if (_breaksTimeList.Any())
        {
            var foundItem = _breaksTimeList.FirstOrDefault(x => x.Id == Id);
            if (foundItem != null)
            {
                _totalExtraBreak -= Math.Round((decimal)((foundItem.To - foundItem.From).TotalMinutes / 60), 2);
                _breaksTimeList.RemoveAll(x => x.Id == Id);

                StateHasChanged();
            }
        }
    }

    private async Task Save()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                //if (_dailyEndTime < _dailyStartTime || _breakEndTime < _breakStartTime || _breakEndTime > _dailyEndTime || _breakStartTime < _dailyStartTime)
                //    (TimeSpan.Compare(_dailyEndTime, _dailyStartTime)>)
                //{
                //    AddModuleMessage("Invalid Time Range", MessageType.Warning);
                //    return;
                //}

                TimesheetData Timesheet = await TimesheetService.GetTimesheetAsync(_id, ModuleState.ModuleId);
                Timesheet.DailyStartTime = _dailyStartTime;
                Timesheet.DailyEndTime = _dailyEndTime;
                Timesheet.BreakStartTime = _breakStartTime;
                Timesheet.BreakEndTime = _breakEndTime;
                Timesheet.TotalRestHour = (decimal)Math.Round((DateTime.Parse(Timesheet.BreakEndTime.ToString("H:mm")) - DateTime.Parse(Timesheet.BreakStartTime.ToString("H:mm"))).TotalMinutes / 60);
                Timesheet.TotalWorkingHour = (decimal)Math.Round((DateTime.Parse(Timesheet.DailyEndTime.ToString("H:mm")) - DateTime.Parse(Timesheet.DailyStartTime.ToString("H:mm"))).TotalMinutes / 60);
                Timesheet.TotalBreakHour = _totalExtraBreak;
                Timesheet.Notes = ConvertToNotes(_breaksTimeList);


                Timesheet.ModifiedBy = PageState.User.Username;
                Timesheet.ModifiedOn = DateTime.Now;

                await TimesheetService.UpdateTimesheetAsync(Timesheet, ModuleState.ModuleId);
                await logger.LogInformation("Timesheet Updated {Timesheet}", Timesheet);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Saving Timesheet", MessageType.Error);
        }
    }

    private string ConvertToNotes(List<BreakTimes> breakTimeList)
    {
        return System.Text.Json.JsonSerializer.Serialize(breakTimeList);
    } }
