@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Syncfusion.Blazor.Buttons

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager

@if (_Timesheets == null)
{
    <p><em>Loading...</em></p> }
else
{
    <ActionLink Action="Upload" class="btn btn-info" Text="Import" Parameters="@($"id=" + _folderId.ToString())" ResourceKey="UploadFiles" />
    <SfButton OnClick="ExcelExport" class="btn btn-primary" Content="Export"></SfButton>
    <ActionLink Action="Payroll" class="btn btn-secondary" Text="Daily Summary" />
    <ActionLink Action="Attendance" class="btn btn-secondary" Text="Daily Attendance" />
    <br />
    <br />
    <SfGrid DataSource="@exportData" @ref="Grid" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="Toolbaritems">
        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
        <GridEvents TValue="TimesheetDataExcelExport" RowDataBound="RowBound"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.PayrollID) HeaderText="Payroll ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DayOfWeek) HeaderText="Date Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.Date) HeaderText="Date" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyStartTime) HeaderText="Start Time" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyEndTime) HeaderText="End Time" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetData.TotalRestHour) HeaderText="Break Hours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetData.TotalWorkingHour) HeaderText="Working Hours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="120">
                <Template>
                    @{ var timesheetData = (context as TimesheetDataExcelExport);
                        <td><ActionLink Action="Edit" Parameters="@($"id=" + timesheetData.TimesheetDataId.ToString())" /></td>
                        <td><ActionDialog Header="Delete Employee" Message="@("Are You Sure You Wish To Delete The " + timesheetData.Name+" record?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(timesheetData.TimesheetDataId))" /></td>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>}

<!-- The content below is for informational purposes only and can be safely removed -->

<br />
<br />
<!-- The content above is for informational purposes only and can be safely removed -->

@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    private SfGrid<TimesheetDataExcelExport> Grid;
    List<TimesheetData> _Timesheets;
    private int _folderId = 1;
    private List<Object> Toolbaritems = new List<Object>() { "Search" };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);

            foreach (var item in _Timesheets)
            {
                TimesheetDataExcelExport row = new TimesheetDataExcelExport();
                row.Name = item.FirstName + " " + item.LastName;
                row.TimesheetDataId = item.TimesheetDataId;
                row.PayrollID = item.PayrollID;
                row.DayOfWeek = item.DayOfWeek;
                row.Date = item.Date;
                row.Rate = item.Rate;
                row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
                row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
                row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
                row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
                row.TotalRestHour = item.TotalRestHour;
                row.TotalWorkingHour = item.TotalWorkingHour;
                row.TotalPay = item.Rate * item.TotalWorkingHour;

                exportData.Add(row);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);
            exportData.Clear();

            foreach (var item in _Timesheets)
            {
                TimesheetDataExcelExport row = new TimesheetDataExcelExport();
                row.Name = item.FirstName + " " + item.LastName;
                row.TimesheetDataId = item.TimesheetDataId;
                row.PayrollID = item.PayrollID;
                row.DayOfWeek = item.DayOfWeek;
                row.Date = item.Date;
                row.Rate = item.Rate;
                row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
                row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
                row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
                row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
                row.TotalRestHour = item.TotalRestHour;
                row.TotalWorkingHour = item.TotalWorkingHour;
                row.TotalPay = item.Rate * item.TotalWorkingHour;

                exportData.Add(row);
            }

            Grid.Refresh();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    public async Task ExcelExport()
    {
        List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();
        foreach (var item in _Timesheets)
        {
            TimesheetDataExcelExport row = new TimesheetDataExcelExport();
            row.Name = item.FirstName + " " + item.LastName;
            row.PayrollID = item.PayrollID;
            row.DayOfWeek = item.DayOfWeek;
            row.Date = item.Date;
            row.Rate = item.Rate;
            row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
            row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
            row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
            row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
            row.TotalRestHour = item.TotalRestHour;
            row.TotalWorkingHour = item.TotalWorkingHour;
            row.TotalPay = item.Rate * item.TotalWorkingHour;

            exportData.Add(row);
        }

        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.DataSource = exportData;

        var columns = new List<GridColumn>();

        columns.Add(new GridColumn() { Field = "Name", Width = "120px" });
        columns.Add(new GridColumn() { Field = "PayrollID", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DayOfWeek", Width = "120px" });
        columns.Add(new GridColumn() { Field = "Date", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DailyStartTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DailyEndTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "BreakStartTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "BreakEndTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalRestHour", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalWorkingHour", Width = "120px" });
        columns.Add(new GridColumn() { Field = "Rate", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalPay", Width = "120px" });


        ExcelProperties.Columns = columns;
        ExcelProperties.FileName = "DetailReport.xlsx";

        await this.Grid.ExcelExport(ExcelProperties);
    }

    public void RowBound(RowDataBoundEventArgs<TimesheetDataExcelExport> args)
    {
        if (args.Data.TotalWorkingHour > 8)
        {
            args.Row.AddClass(new string[] { "table-warning" });
        }

        if (args.Data.TotalWorkingHour < 0 || args.Data.TotalRestHour < 0)
        {
            args.Row.AddClass(new string[] { "table-danger" });
        }
    }
}
