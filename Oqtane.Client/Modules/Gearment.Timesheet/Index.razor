@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using System.IO
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Popups

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager
@inject IFolderService FolderService

@if (_Timesheets == null)
{
    <p><em>Loading...</em></p> }
else
{
    <ActionLink Action="Upload" Security="SecurityAccessLevel.Edit" class="btn btn-info" Text="Import" Parameters="@($"id=" + _folderId.ToString())" ResourceKey="UploadFiles" />
    <SfButton OnClick="ExcelExport" class="btn btn-primary" Content="Export"></SfButton>
    <ActionLink Action="Payroll" Security="SecurityAccessLevel.Edit" class="btn btn-secondary" Text="Daily Summary" />
    <ActionLink Action="Attendance" Security="SecurityAccessLevel.Edit" class="btn btn-secondary" Text="Daily Attendance" />
    <ActionLink Action="Correct" Security="SecurityAccessLevel.Edit" class="btn btn-danger" Text="Data Correction" />
    <br />
    <br />
    <div class="form-group row">
        <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
            <div class="input-group">
                <SfDatePicker Width="100%" Placeholder="From Date" @bind-Value="@_fromDate" FloatLabelType="FloatLabelType.Auto"></SfDatePicker>
            </div>
        </div>
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <div class="input-group">
                <SfDatePicker Width="100%" Placeholder="To Date" @bind-Value="@_toDate" FloatLabelType="FloatLabelType.Auto"></SfDatePicker>
            </div>
        </div>

    </div>
    <div class="form-group row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <SfButton OnClick="Search" class="btn btn-info" Content="Search"></SfButton>
        </div>
    </div>
    <br />

    <div class="form-group row">
        <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
            <SfSwitch @bind-Checked="_isWarningChecked" OffLabel="Check" OnLabel="Check" ValueChange="IsWarningChange" TChecked="bool"></SfSwitch>
        </div>
        <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
            <ActionLink Action="Event" Security="SecurityAccessLevel.Edit" class="btn btn-secondary" Text="Add" />
        </div>
    </div>

    <div class="form-group row">
        <SfGrid DataSource="@_attendance" @ref="_attendanceGrid" AllowResizing="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="@(new List<string>() { "ExcelExport", "CsvExport", "PdfExport", "Search" })">
            <GridEvents OnToolbarClick="ToolbarClick" TValue="TimesheetDataExcelExport" RowDataBound="RowBound"></GridEvents>
            <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.EmployeeId) HeaderText="ID" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.Department) HeaderText="Department" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.Date) HeaderText="Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.DayOfWeek) HeaderText="Date Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyStartTime) HeaderText="Start Time" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyEndTime) HeaderText="End Time" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.TotalRestHour) HeaderText="Lunch Break" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.TotalBreakHour) HeaderText="Extra Break" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                <GridColumn Field=@nameof(TimesheetDataExcelExport.TotalWorkingHour) HeaderText="Working Hours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                <GridColumn HeaderText="Detail" TextAlign="TextAlign.Left">
                    <Template>
                        @{ var timesheetData = (context as TimesheetDataExcelExport);
                            @*<button data-toggle="collapse" class="btn btn-info" data-target="#@timesheetData.Id" aria-expanded="false" aria-controls="@timesheetData.Id">View Detail</button>*@
                            <br />
                            <div>
                                <div class="card card-body">
                                    <table class="table table-striped detailtable">
                                        <thead>
                                            <tr>
                                                <th scope="col">EventType</th>
                                                <th scope="col">EventTime</th>
                                                <th scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in timesheetData.EventTimeLine)
                                            {
                                                if (item.IsWarning)
                                                {
                                                    <tr class="table-warning">
                                                        <td>
                                                            <SfTooltip Target="#txt" @key="@item.EventId">
                                                                <TooltipTemplates>
                                                                    <Content>
                                                                        <b>EventId:</b> @item.EventId -
                                                                        <b>Station:</b> @item.Station
                                                                        <div class="image">
                                                                            <img class="rounded img-thumbnail" src="@(imagePrefix + item.ImageUrl)" alt="@item.EventId" />
                                                                        </div>
                                                                    </Content>
                                                                </TooltipTemplates>
                                                                <span id="txt">@item.EventType</span>
                                                            </SfTooltip>
                                                        </td>
                                                        <td>@item.EventTime</td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td>
                                                            <SfTooltip Target="#txt" @key="@item.EventId">
                                                                <TooltipTemplates>
                                                                    <Content>
                                                                        <span id="txt"><b>EventId:</b> @item.EventId - <b>Station:</b> @item.Station</span>
                                                                    </Content>
                                                                </TooltipTemplates>
                                                                <span id="txt">@item.EventType</span>
                                                            </SfTooltip>
                                                        </td>
                                                        <td>@item.EventTime</td>
                                                        <td>
                                                            <ActionLink Action="Edit" Parameters="@($"id=" + item.EventId)" />
                                                            <ActionDialog Header="Delete Event" Message="@("Are You Sure You Wish To Delete The " + item.EventId+" record?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await DeleteEvent(item.EventId))" />
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            <tr>
                                                <td colspan="3">
                                                    <ActionLink Action="Add" Text="add more..." Class="btn btn-link" Parameters="@($"id=" + timesheetData.EventTimeLine.FirstOrDefault().EventId)" />
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <br />
    <br />
    <SfGrid DataSource="@exportData" @ref="Grid" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="Toolbaritems">
        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
        <GridEvents TValue="TimesheetDataExcelExport" RowDataBound="RowBound"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.PayrollID) HeaderText="Payroll ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.Department) HeaderText="Department" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DayOfWeek) HeaderText="Date Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.Date) HeaderText="Date" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyStartTime) HeaderText="Start Time" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.DailyEndTime) HeaderText="End Time" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetDataExcelExport.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetData.TotalRestHour) HeaderText="Lunch Break" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetData.TotalBreakHour) HeaderText="Extra Break" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TimesheetData.TotalWorkingHour) HeaderText="Working Hours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="120">
                <Template>
                    @{ var timesheetData = (context as TimesheetDataExcelExport);
                        <td><ActionLink Action="Edit" Parameters="@($"id=" + timesheetData.TimesheetDataId.ToString())" /></td>
                        <td><ActionDialog Header="Delete Employee" Message="@("Are You Sure You Wish To Delete The " + timesheetData.Name+" record?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(timesheetData.TimesheetDataId))" /></td>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    <br />
}

<!-- The content below is for informational purposes only and can be safely removed -->

<br />
<br />
<!-- The content above is for informational purposes only and can be safely removed -->

@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    private SfGrid<TimesheetDataExcelExport> Grid;
    private SfGrid<TimesheetDataExcelExport> _attendanceGrid;
    private string imagePrefix = "https://attendance.geatech.net/log-images/";
    List<TimesheetData> _Timesheets;
    List<TimesheetDataExcelExport> _attendance;
    private int _folderId = 2;
    private List<Object> Toolbaritems = new List<Object>() { "Search" };
    private bool _isWarningChecked = false;
    private bool IsVisible { get; set; } = false;

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();

    DateTime _fromDate = DateTime.Now;
    DateTime _toDate = DateTime.Now;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    public Query GetEmployeesQuery(Employee_FaceRegEventDetail value)
    {
        return new Query().Where("EmployeeId", "equal", value.EmployeeId);
    }

    public Query GetDateQuery(Employee_FaceRegEventSummary value)
    {
        return new Query()
        .Where("EmployeeId", "equal", value.EmployeeId);
    }

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        ShowProgressIndicator();
        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            TimesheetDailyQuery query = new TimesheetDailyQuery();
            query.FromDate = _fromDate;
            query.ToDate = _toDate;
            query.Department = "All";

            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);
            _attendance = await TimesheetService.GetAttendanceDataAsync(ModuleState.ModuleId, query);

            UpdateExportData();
            HideProgressIndicator();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task IsWarningChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        ShowProgressIndicator();
        TimesheetDailyQuery query = new TimesheetDailyQuery();
        query.FromDate = _fromDate;
        query.ToDate = _toDate;
        query.Department = "All";
        query.IsWarning = _isWarningChecked;

        _attendance = await TimesheetService.GetAttendanceDataAsync(ModuleState.ModuleId, query);
        HideProgressIndicator();
    }

    private async Task Search()
    {
        ShowProgressIndicator();

        try
        {
            TimesheetDailyQuery query = new TimesheetDailyQuery();
            query.FromDate = _fromDate;
            query.ToDate = _toDate;
            query.Department = "All";
            query.IsWarning = _isWarningChecked;

            _Timesheets = await TimesheetService.GetTimesheetDataByDateAsync(ModuleState.ModuleId, query);
            _attendance = await TimesheetService.GetAttendanceDataAsync(ModuleState.ModuleId, query);

            if (!_Timesheets.Any())
            {
                HideProgressIndicator();
                return;
            }

            UpdateExportData();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }

        HideProgressIndicator();
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);

            UpdateExportData();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task DeleteEvent(int EventId)
    {
        try
        {
            ShowProgressIndicator();

            TimesheetDailyQuery query = new TimesheetDailyQuery();
            query.FromDate = _fromDate;
            query.ToDate = _toDate;
            query.Department = "All";
            query.IsWarning = _isWarningChecked;

            await TimesheetService.DeleteAttendanceDataAsync(EventId, ModuleState.ModuleId);
            await logger.LogInformation("Event Deleted {Timesheet}", EventId);
            _attendance = await TimesheetService.GetAttendanceDataAsync(ModuleState.ModuleId, query);
            _attendanceGrid.Refresh();

            HideProgressIndicator();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Attendance Event {Timesheet} {Error}", EventId, ex.Message);
            AddModuleMessage("Error Deleting Attendance Event", MessageType.Error);
        }
    }


    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("pdfexport"))
        {
            this._attendanceGrid.PdfExport();
        }
        if (args.Item.Id.Contains("excelexport"))
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.DataSource = _attendance;

            var columns = new List<GridColumn>();

            columns.Add(new GridColumn() { Field = "Name", Width = "120px" });
            columns.Add(new GridColumn() { Field = "PayrollID", Width = "120px" });
            columns.Add(new GridColumn() { Field = "Department", Width = "120px" });
            columns.Add(new GridColumn() { Field = "DayOfWeek", Width = "120px" });
            columns.Add(new GridColumn() { Field = "Date", Width = "120px" });
            columns.Add(new GridColumn() { Field = "DailyStartTime", Width = "120px" });
            columns.Add(new GridColumn() { Field = "DailyEndTime", Width = "120px" });
            columns.Add(new GridColumn() { Field = "BreakStartTime", Width = "120px" });
            columns.Add(new GridColumn() { Field = "BreakEndTime", Width = "120px" });
            columns.Add(new GridColumn() { Field = "TotalRestHour", Width = "120px" });
            columns.Add(new GridColumn() { Field = "TotalWorkingHour", Width = "120px" });
            columns.Add(new GridColumn() { Field = "TotalBreakHour", Width = "120px" });
            columns.Add(new GridColumn() { Field = "Rate", Width = "120px" });
            columns.Add(new GridColumn() { Field = "TotalPay", Width = "120px" });


            ExcelProperties.Columns = columns;
            ExcelProperties.FileName = "DetailReport.xlsx";
            this.Grid.ExcelExport(ExcelProperties);
        }
        if (args.Item.Id.Contains("csvexport"))
        {
            this._attendanceGrid.CsvExport();
        }
    }

    public async Task ExcelExport()
    {
        UpdateExportData();

        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.DataSource = exportData;

        var columns = new List<GridColumn>();

        columns.Add(new GridColumn() { Field = "Name", Width = "120px" });
        columns.Add(new GridColumn() { Field = "PayrollID", Width = "120px" });
        columns.Add(new GridColumn() { Field = "Department", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DayOfWeek", Width = "120px" });
        columns.Add(new GridColumn() { Field = "Date", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DailyStartTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "DailyEndTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "BreakStartTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "BreakEndTime", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalRestHour", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalWorkingHour", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalBreakHour", Width = "120px" });
        columns.Add(new GridColumn() { Field = "Rate", Width = "120px" });
        columns.Add(new GridColumn() { Field = "TotalPay", Width = "120px" });


        ExcelProperties.Columns = columns;
        ExcelProperties.FileName = "DetailReport.xlsx";

        await this.Grid.ExcelExport(ExcelProperties);
    }

    public void RowBound(RowDataBoundEventArgs<TimesheetDataExcelExport> args)
    {
        if (args.Data.TotalWorkingHour > 8)
        {
            args.Row.AddClass(new string[] { "table-warning" });
        }

        if (args.Data.TotalWorkingHour < 0 || args.Data.TotalRestHour < 0)
        {
            args.Row.AddClass(new string[] { "table-danger" });
        }
    }

    private void UpdateExportData()
    {
        exportData.Clear();

        foreach (var item in _Timesheets)
        {
            TimesheetDataExcelExport row = new TimesheetDataExcelExport();
            row.Name = item.FirstName + " " + item.LastName;
            row.TimesheetDataId = item.TimesheetDataId;
            row.PayrollID = item.PayrollID;
            row.Department = item.Department;
            row.DayOfWeek = item.DayOfWeek;
            row.Date = item.Date;
            row.Rate = item.Rate;
            row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
            row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
            row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
            row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
            row.TotalRestHour = item.TotalRestHour;
            row.TotalWorkingHour = item.TotalWorkingHour;
            row.TotalPay = item.Rate * item.TotalWorkingHour;
            row.TotalBreakHour = item.TotalBreakHour;
            row.Notes = item.Notes;

            exportData.Add(row);
        }

        if (Grid != null)
        {
            Grid.Refresh();
        }
    }
}
