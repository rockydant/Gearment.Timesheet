@using Gearment.Timesheet.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

@namespace Gearment.Timesheet
@inherits ModuleBase
@inject ITimesheetService TimesheetService
@inject NavigationManager NavigationManager

@if (_Timesheets == null)
{
<p><em>Loading...</em></p> }
else
{
<button class="btn btn-info" @onclick="@OnImportButtonClick">Import Excel</button>
                <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Timesheet" />
                                <br />
                                                <br />
                                                                @if (@_Timesheets.Count != 0)
                                                                {
                                                <Pager Items="@_Timesheets">
                                                    <Header>
                                                        <th style="width: 1px;">&nbsp;</th>
                                                        <th style="width: 1px;">&nbsp;</th>
                                                        <th>Name</th>
                                                    </Header>
                                                    <Row>
                                                        <td><ActionLink Action="Edit" Parameters="@($"id=" + context.TimesheetId.ToString())" /></td>
                                                        <td><ActionDialog Header="Delete Timesheet" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Timesheet?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                                                        <td>@context.Name</td>
                                                    </Row>
                                                </Pager> }
                                                                else
                                                                {
                            <p>No Timesheets To Display</p>}}

<!-- The content below is for informational purposes only and can be safely removed -->

<br />
<br />
<SfDialog Width="335px" Target="#target" IsModal="true" @bind-Visible="ImportExcelDialogEnable">
    <DialogTemplates>
        <Header> Import Excel </Header>
        <Content>
            <div class="form-group row">
                <td>
                    <Label For="upload" HelpText="Upload the file you want" ResourceKey="Upload">Upload: </Label>
                </td>
                <td>
                    <InputFile OnChange="@OnFileSelection"></InputFile>
                </td>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@OnImportExcelDialogSaveButtonClick" />
        <DialogButton Content="Cancel" OnClick="@OnCancelButtonClick" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

<!-- The content above is for informational purposes only and can be safely removed -->

@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Timesheet> _Timesheets;
    private int _folderId = -1;

    private bool ImportExcelDialogEnable { get; set; } = false;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            _Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task Delete(Timesheet Timesheet)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(Timesheet.TimesheetId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", Timesheet);
            _Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", Timesheet, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }
    private void OnImportButtonClick()
    {
        ImportExcelDialogEnable = true;
    }

    private void OnImportExcelDialogSaveButtonClick()
    {
        ImportExcelDialogEnable = false;
    }
    private void OnCancelButtonClick()
    {
        ImportExcelDialogEnable = false;
    }

    private void OnFileSelection(InputFileChangeEventArgs e)
    {
        using (var reader = new StreamReader(e.File.OpenReadStream()))
        {

        }
    }
}