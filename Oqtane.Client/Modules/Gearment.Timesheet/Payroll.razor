@namespace Gearment.Timesheet
@using Gearment.Timesheet.Services
@using Gearment.Employee.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Gearment.Department.Models

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITimesheetService TimesheetService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IEmployeeService EmployeeService

<SfTab CssClass="BlazorTab" Height="390" LoadOn="ContentLoad.Demand">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="New Payroll"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <br />
                <div class="form-group row">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <div class="input-group">
                            <SfDatePicker Width="100%" Placeholder="From Date" FloatLabelType="FloatLabelType.Auto" TValue="DateTime?" Value="@(DateTime.Now)" Min="@((DateTime.Now).AddDays(-1))" Max="@(DateTime.Now.AddMonths(3))"></SfDatePicker>
                        </div>
                    </div>
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <div class="input-group">
                            <SfDatePicker Width="100%" Placeholder="To Date" FloatLabelType="FloatLabelType.Auto" TValue="DateTime?" Value="@(DateTime.Now)" Min="@((DateTime.Now).AddDays(-1))" Max="@(DateTime.Now.AddMonths(3))"></SfDatePicker>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="Filter by employee" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                    <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="Filter by department" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <br />
                <SfButton OnClick="Create" class="btn btn-primary" Content="Create"></SfButton>
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Payroll History"></TabHeader>
            </ChildContent>
            <ContentTemplate>

            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };
    List<TimesheetData> _Timesheets;
    private int _folderId = 1;
    private List<Object> Toolbaritems = new List<Object>() { "Search", "Print" };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();
    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };


    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        departmentListFilter = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);

        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            _Timesheets = await TimesheetService.GetTimesheetDataAsync(ModuleState.ModuleId);

            foreach (var item in _Timesheets)
            {
                TimesheetDataExcelExport row = new TimesheetDataExcelExport();
                row.Name = item.FirstName + " " + item.LastName;
                row.PayrollID = item.PayrollID;
                row.DayOfWeek = item.DayOfWeek;
                row.Date = item.Date;
                row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
                row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
                row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
                row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
                row.TotalRestHour = item.TotalRestHour;
                row.TotalWorkingHour = item.TotalWorkingHour;

                exportData.Add(row);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Timesheet {Error}", ex.Message);
            AddModuleMessage("Error Loading Timesheet", MessageType.Error);
        }
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            //_Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        if (args.Value == "All")
        {
            //await RefreshGrid();
        }
        else
        {
            //Employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
            //Employees = Employees.FindAll(x => x.Department.Contains(args.Value));
        }
    }

    private async Task Create()
    {
        return;
    }
}

