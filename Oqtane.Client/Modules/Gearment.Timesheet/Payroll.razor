@namespace Gearment.Timesheet
@using Gearment.Timesheet.Services
@using Gearment.Employee.Services
@using Gearment.Employee.Models
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Gearment.Department.Models
@using System.IO;
@using Syncfusion.XlsIO;
@using Syncfusion.Drawing;

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITimesheetService TimesheetService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IEmployeeService EmployeeService
@inject Microsoft.JSInterop.IJSRuntime JS

<SfTab CssClass="BlazorTab" LoadOn="ContentLoad.Demand">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="New Payroll"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <br />
                <div class="form-group row">
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>From Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_fromDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>To Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_toDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>Department</label>
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="All" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <Section Name="Holidays" Heading="Bonus on Holidays">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.BonusQueryComponent FromDate="@_fromDate" ToDate="@_toDate" SelectedDates="@SelectedHolidays" />
                        </div>
                    </div>
                </Section>
                <br />
                <Section Name="SickLeave" Heading="Sick Leaves">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.SickLeaveComponent Employees="@employees" DepartmentListFilter="@departmentListFilter" SelectedDates="@SelectedSickLeaves" />
                        </div>
                    </div>
                </Section>
                <br />
                <SfButton OnClick="Create" class="btn btn-primary" Content="Create"></SfButton>
                <SfButton OnClick="Export" class="btn btn-secondary" Content="Export"></SfButton>
                <br /><br />
                <div class="form-group row">
                    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                        <div class="alert alert-primary" role="alert">
                            Total Payment Amount <a href="#" class="alert-link"> $@_TotalAmount</a>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <SfGrid DataSource="@_attendance" @ref="_attendanceGrid" AllowResizing="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="ToolbarItems">
                        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="PayrollViewModel"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(PayrollViewModel.Id) HeaderText="ID" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Department) HeaderText="Department" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Rate) HeaderText="Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.BonusRate) HeaderText="Bonus Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalWorkingHours) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimeHours) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalPay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimePay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalBonusPay) HeaderText="TotalBonusPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalSickPay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridTemplates>
                                <DetailTemplate>
                                    @{
                                        var payrollDetail = (context as PayrollViewModel).PayrollDetailList;
                                        <SfGrid TValue="PayrollDetailViewModel" DataSource="@payrollDetail">
                                            <GridColumns>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DayOfWeek) HeaderText="Day Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.Date) HeaderText="Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyStartTime) HeaderText="Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyEndTime) HeaderText="End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalWorkingHourCurrentDay) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimeHourCurrentDay) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalPayCurrentDay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimePayCurrentDay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalSickPayCurrentDay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    }
                                </DetailTemplate>
                            </GridTemplates>
                        </GridColumns>
                    </SfGrid>
                </div>
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Payroll History"></TabHeader>
            </ChildContent>
            <ContentTemplate>

            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>
<style>
    tr.collapse.in {
        display: table-row;
    }
</style>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<TimesheetData> _Timesheets;

    private SfGrid<PayrollViewModel> Grid;
    private SfGrid<PayrollViewModel> _attendanceGrid;
    private int _folderId = 1;
    private List<Object> ToolbarItems = new List<Object>() { "Search", "Print", new ItemModel() { Text = "Payroll Report", TooltipText = "Payroll Report", PrefixIcon = "Excel_Export" } };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();
    private List<Holiday> SelectedHolidays = new List<Holiday>();
    private List<SickLeave> SelectedSickLeaves = new List<SickLeave>();

    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };
    List<PayrollViewModel> payrollList = new List<PayrollViewModel>();
    List<PayrollViewModel> _attendance;

    DateTime _fromDate = DateTime.Now;
    DateTime _toDate = DateTime.Now;
    string _department = "All";
    private List<Employee> employees = new List<Employee>();

    decimal _TotalAmount = 0;

    protected override async Task OnInitializedAsync()
    {
        departmentListFilter = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);
        employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Payroll Report") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            ExportProperties.IncludeHiddenColumn = true;
            ExportProperties.FileName = "Payroll-" + _fromDate.ToString("MMddyyyy") + "-" + _toDate.ToString("MMddyyyy") + ".xlxs";
            await this._attendanceGrid.ExcelExport(ExportProperties);
        }
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            //_Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        _department = args.Value;
    }

    private async Task Export()
    {
        ShowProgressIndicator();
        if (_attendance != null)
        {
            //MemoryStream excelStream = await TimesheetService.ExportPayrollDataAsync(ModuleState.ModuleId, _attendance);
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
                IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2016;

                //Create a workbook
                IWorkbook workbook = application.Workbooks.Create(1);
                IWorksheet worksheet = workbook.Worksheets[0];

                //Disable gridlines in the worksheet
                worksheet.IsGridLinesVisible = false;

                //Enter values to the cells from A3 to A5
                worksheet.Range["A3"].Text = "46036 Michigan Ave";
                worksheet.Range["A4"].Text = "Canton, USA";
                worksheet.Range["A5"].Text = "Phone: +1 231-231-2310";

                //Make the text bold
                worksheet.Range["A3:A5"].CellStyle.Font.Bold = true;

                //Merge cells
                worksheet.Range["D1:E1"].Merge();

                //Enter text to the cell B1 and apply formatting
                worksheet.Range["B1"].Text = "INVOICE";
                worksheet.Range["B1"].CellStyle.Font.Bold = true;
                worksheet.Range["B1"].CellStyle.Font.RGBColor = Color.FromArgb(42, 118, 189);
                worksheet.Range["B1"].CellStyle.Font.Size = 35;

                //Apply alignment in the cell B1
                worksheet.Range["B1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range["B1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

                //Enter values to the cells from D5 to E8
                worksheet.Range["D5"].Text = "INVOICE#";
                worksheet.Range["E5"].Text = "DATE";
                worksheet.Range["D6"].Number = 1028;
                worksheet.Range["E6"].Value = "12/31/2018";
                worksheet.Range["D7"].Text = "CUSTOMER ID";
                worksheet.Range["E7"].Text = "TERMS";
                worksheet.Range["D8"].Number = 564;
                worksheet.Range["E8"].Text = "Due Upon Receipt";

                //Apply RGB backcolor to the cells from D5 to E8
                worksheet.Range["D5:E5"].CellStyle.Color = Color.FromArgb(42, 118, 189);
                worksheet.Range["D7:E7"].CellStyle.Color = Color.FromArgb(42, 118, 189);

                //Apply known colors to the text in cells D5 to E8
                worksheet.Range["D5:E5"].CellStyle.Font.Color = ExcelKnownColors.White;
                worksheet.Range["D7:E7"].CellStyle.Font.Color = ExcelKnownColors.White;

                //Make the text as bold from D5 to E8
                worksheet.Range["D5:E8"].CellStyle.Font.Bold = true;

                //Apply alignment to the cells from D5 to E8
                worksheet.Range["D5:E8"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range["D5:E5"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                worksheet.Range["D7:E7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                worksheet.Range["D6:E6"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

                //Enter value and applying formatting in the cell A7
                worksheet.Range["A7"].Text = "  BILL TO";
                worksheet.Range["A7"].CellStyle.Color = Color.FromArgb(42, 118, 189);
                worksheet.Range["A7"].CellStyle.Font.Bold = true;
                worksheet.Range["A7"].CellStyle.Font.Color = ExcelKnownColors.White;

                //Apply alignment
                worksheet.Range["A7"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                worksheet.Range["A7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;

                //Enter values in the cells A8 to A12
                worksheet.Range["A8"].Text = "Steyn";
                worksheet.Range["A9"].Text = "Great Lakes Food Market";
                worksheet.Range["A10"].Text = "20 Whitehall Rd";
                worksheet.Range["A11"].Text = "North Muskegon,USA";
                worksheet.Range["A12"].Text = "+1 231-654-0000";

                //Create a Hyperlink for e-mail in the cell A13
                IHyperLink hyperlink = worksheet.HyperLinks.Add(worksheet.Range["A13"]);
                hyperlink.Type = ExcelHyperLinkType.Url;
                hyperlink.Address = "Steyn@greatlakes.com";
                hyperlink.ScreenTip = "Send Mail";

                //Merge column A and B from row 15 to 22
                worksheet.Range["A15:B15"].Merge();
                worksheet.Range["A16:B16"].Merge();
                worksheet.Range["A17:B17"].Merge();
                worksheet.Range["A18:B18"].Merge();
                worksheet.Range["A19:B19"].Merge();
                worksheet.Range["A20:B20"].Merge();
                worksheet.Range["A21:B21"].Merge();
                worksheet.Range["A22:B22"].Merge();

                //Enter details of products and prices
                worksheet.Range["A15"].Text = "  DESCRIPTION";
                worksheet.Range["C15"].Text = "QTY";
                worksheet.Range["D15"].Text = "UNIT PRICE";
                worksheet.Range["E15"].Text = "AMOUNT";
                worksheet.Range["A16"].Text = "Cabrales Cheese";
                worksheet.Range["A17"].Text = "Chocos";
                worksheet.Range["A18"].Text = "Pasta";
                worksheet.Range["A19"].Text = "Cereals";
                worksheet.Range["A20"].Text = "Ice Cream";
                worksheet.Range["C16"].Number = 3;
                worksheet.Range["C17"].Number = 2;
                worksheet.Range["C18"].Number = 1;
                worksheet.Range["C19"].Number = 4;
                worksheet.Range["C20"].Number = 3;
                worksheet.Range["D16"].Number = 21;
                worksheet.Range["D17"].Number = 54;
                worksheet.Range["D18"].Number = 10;
                worksheet.Range["D19"].Number = 20;
                worksheet.Range["D20"].Number = 30;
                worksheet.Range["D23"].Text = "Total";

                //Apply number format
                worksheet.Range["D16:E22"].NumberFormat = "$.00";
                worksheet.Range["E23"].NumberFormat = "$.00";

                //Apply incremental formula for column Amount by multiplying Qty and UnitPrice
                application.EnableIncrementalFormula = true;
                worksheet.Range["E16:E20"].Formula = "=C16*D16";

                //Formula for Sum the total
                worksheet.Range["E23"].Formula = "=SUM(E16:E22)";

                //Apply borders
                worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Grey_25_percent;
                worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Grey_25_percent;
                worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Black;
                worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Black;

                //Apply font setting for cells with product details
                worksheet.Range["A3:E23"].CellStyle.Font.FontName = "Arial";
                worksheet.Range["A3:E23"].CellStyle.Font.Size = 10;
                worksheet.Range["A15:E15"].CellStyle.Font.Color = ExcelKnownColors.White;
                worksheet.Range["A15:E15"].CellStyle.Font.Bold = true;
                worksheet.Range["D23:E23"].CellStyle.Font.Bold = true;

                //Apply cell color
                worksheet.Range["A15:E15"].CellStyle.Color = Color.FromArgb(42, 118, 189);

                //Apply alignment to cells with product details
                worksheet.Range["A15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                worksheet.Range["C15:C22"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                worksheet.Range["D15:E15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;

                //Apply row height and column width to look good
                worksheet.Range["A1"].ColumnWidth = 36;
                worksheet.Range["B1"].ColumnWidth = 11;
                worksheet.Range["C1"].ColumnWidth = 8;
                worksheet.Range["D1:E1"].ColumnWidth = 18;
                worksheet.Range["A1"].RowHeight = 47;
                worksheet.Range["A2"].RowHeight = 15;
                worksheet.Range["A3:A4"].RowHeight = 15;
                worksheet.Range["A5"].RowHeight = 18;
                worksheet.Range["A6"].RowHeight = 29;
                worksheet.Range["A7"].RowHeight = 18;
                worksheet.Range["A8"].RowHeight = 15;
                worksheet.Range["A9:A14"].RowHeight = 15;
                worksheet.Range["A15:A23"].RowHeight = 18;

                //Save the document as a stream and retrun the stream.
                using (MemoryStream stream = new MemoryStream())
                {
                    //Save the created Excel document to MemoryStream
                    workbook.SaveAs(stream);

                    //Download the excel file
                    await JS.SaveAs("test.xlsx", stream.ToArray());
                }
            }
        }

        HideProgressIndicator();
    }

    private async Task Create()
    {
        ShowProgressIndicator();

        if (DateTime.Compare(_fromDate, _toDate) > 0)
        {
            AddModuleMessage("Invalid Date Range", MessageType.Error);
        }
        else
        {
            _TotalAmount = 0;
            payrollList.Clear();

            TimesheetDailyQuery timesheetDailyQuery = new TimesheetDailyQuery();
            timesheetDailyQuery.FromDate = _fromDate;
            timesheetDailyQuery.ToDate = _toDate;
            timesheetDailyQuery.Department = _department;
            timesheetDailyQuery.EmployeeName = string.Empty;
            timesheetDailyQuery.IsWarning = false;
            timesheetDailyQuery.IsMultiCheckin = false;
            timesheetDailyQuery.AttendanceStatus = "All";
            if (SelectedHolidays != null)
            {
                timesheetDailyQuery.Holidays = SelectedHolidays;
            }

            if (SelectedSickLeaves != null)
            {
                timesheetDailyQuery.SickLeaves = SelectedSickLeaves;
            }

            _attendance = await TimesheetService.GetPayrollDataAsync(ModuleState.ModuleId, timesheetDailyQuery);

            _attendance = _attendance.OrderBy(x => x.Department).ThenBy(x => x.Name).ToList();

            _TotalAmount = _attendance.Sum(x => x.TotalPay + x.TotalBonusPay + x.TotalOvertimePay);

            _attendanceGrid.Refresh();
        }


        HideProgressIndicator();
    }
}

