@namespace Gearment.Timesheet
@using Gearment.Timesheet.Services
@using Gearment.Employee.Services
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Gearment.Department.Models

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITimesheetService TimesheetService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IEmployeeService EmployeeService

<SfTab CssClass="BlazorTab" Height="390" LoadOn="ContentLoad.Demand">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="New Payroll"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <br />
                <div class="form-group row">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <div class="input-group">
                            <SfDatePicker Width="100%" Placeholder="From Date" @bind-Value="@_fromDate" FloatLabelType="FloatLabelType.Auto"></SfDatePicker>
                        </div>
                    </div>
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <div class="input-group">
                            <SfDatePicker Width="100%" Placeholder="To Date" @bind-Value="@_toDate" FloatLabelType="FloatLabelType.Auto"></SfDatePicker>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    @*<div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                            <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="Filter by employee" DataSource="@departmentListFilter">
                                <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>*@
                    <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="Filter by department" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <br />
                <SfButton OnClick="Create" class="btn btn-primary" Content="Create"></SfButton>
                <div class="form-group row">
                    <SfGrid DataSource="@payrollList" @ref="@Grid" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" AllowGrouping="true" Toolbar="Toolbaritems">
                        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                        @*<GridEvents TValue="TimesheetDataExcelExport" RowDataBound="RowBound"></GridEvents>*@
                        <GridColumns>
                            <GridColumn Field=@nameof(PayrollViewModel.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn HeaderText="Detail" TextAlign="TextAlign.Left" Width="120">
                                <Template>
                                    <table class="table table-striped detailtable">
                                        <thead>
                                            <tr>
                                                <th scope="col">Date</th>
                                                <th scope="col">Total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{ var timesheetData = (context as PayrollViewModel);
                                                foreach (KeyValuePair<string, string> item in timesheetData.WorkingDates)
                                                {
                                                    <tr>
                                                        <td>@item.Key</td>
                                                        <td>@item.Value</td>                                                       
                                                    </tr>
                                                }
                                            }

                                        </tbody>
                                        </table>
                                   
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalPay) HeaderText="Total Pay" Format="C2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Payroll History"></TabHeader>
            </ChildContent>
            <ContentTemplate>

            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<TimesheetData> _Timesheets;

    private SfGrid<PayrollViewModel> Grid;
    private int _folderId = 1;
    private List<Object> Toolbaritems = new List<Object>() { "Search", "Print" };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();

    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };
    List<PayrollViewModel> payrollList = new List<PayrollViewModel>();

    DateTime _fromDate = DateTime.Now;
    DateTime _toDate = DateTime.Now;
    string _department = "All";


    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        departmentListFilter = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            //_Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        _department = args.Value;
    }

    private async Task Create()
    {
        if (DateTime.Compare(_fromDate, _toDate) > 0)
        {
            AddModuleMessage("Invalid Date Range", MessageType.Error);
            return;
        }

        TimesheetDailyQuery timesheetDailyQuery = new TimesheetDailyQuery();
        timesheetDailyQuery.FromDate = _fromDate;
        timesheetDailyQuery.ToDate = _toDate;
        timesheetDailyQuery.Department = _department;
        timesheetDailyQuery.EmployeeName = string.Empty;

        _Timesheets = await TimesheetService.GetTimesheetDataByDateAsync(ModuleState.ModuleId, timesheetDailyQuery);

        foreach (var item in _Timesheets)
        {
            TimesheetDataExcelExport row = new TimesheetDataExcelExport();
            row.Name = item.FirstName + " " + item.LastName;
            row.PayrollID = item.PayrollID;
            row.DayOfWeek = item.DayOfWeek;
            row.Date = item.Date;
            row.DailyStartTime = item.DailyStartTime.ToString("hh:mm tt");
            row.DailyEndTime = item.DailyEndTime.ToString("hh:mm tt");
            row.BreakStartTime = item.BreakStartTime.ToString("hh:mm tt");
            row.BreakEndTime = item.BreakEndTime.ToString("hh:mm tt");
            row.TotalRestHour = item.TotalRestHour;
            row.TotalWorkingHour = item.TotalWorkingHour;
            row.TotalPay = item.Rate * item.TotalWorkingHour;

            if (!payrollList.Any(x => x.Name == row.Name))
            {
                PayrollViewModel payroll = new PayrollViewModel();
                payroll.Name = row.Name;
                payroll.WorkingDates = new Dictionary<string,string>();
                payroll.WorkingDates.Add(row.Date, row.TotalPay.ToString());
                payroll.TotalPay = row.TotalPay;
                payrollList.Add(payroll);
            }
            else
            {
                PayrollViewModel payroll = payrollList.FirstOrDefault(x => x.Name == row.Name);
                payroll.WorkingDates.Add(row.Date, row.TotalPay.ToString());
                payroll.TotalPay += row.TotalPay;
            }

            Grid.Refresh();
        }
    }
}

