@namespace Gearment.Timesheet
@using Gearment.Timesheet.Services
@using Gearment.Employee.Services
@using Gearment.Employee.Models
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Gearment.Department.Models

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITimesheetService TimesheetService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IEmployeeService EmployeeService

<SfTab CssClass="BlazorTab" LoadOn="ContentLoad.Demand">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="New Payroll"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <br />
                <div class="form-group row">
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>From Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_fromDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>To Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_toDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>Department</label>
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="All" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <Section Name="Holidays" Heading="Bonus on Holidays">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.BonusQueryComponent FromDate="@_fromDate" ToDate="@_toDate" SelectedDates="@SelectedHolidays" />
                        </div>
                    </div>
                </Section>
                <br />
                <Section Name="SickLeave" Heading="Sick Leaves">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.SickLeaveComponent Employees="@employees" DepartmentListFilter="@departmentListFilter" SelectedDates="@SelectedSickLeaves" />
                        </div>
                    </div>
                </Section>
                <br />
                <SfButton OnClick="Create" class="btn btn-primary" Content="Create"></SfButton>
                <SfButton OnClick="Export" class="btn btn-secondary" Content="Export"></SfButton>
                <br /><br />
                <div class="form-group row">
                    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                        <div class="alert alert-primary" role="alert">
                            Total Payment Amount <a href="#" class="alert-link"> $@_TotalAmount</a>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <SfGrid DataSource="@_attendance" @ref="_attendanceGrid" AllowResizing="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="ToolbarItems">
                        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(PayrollViewModel.Id) HeaderText="ID" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Department) HeaderText="Department" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Rate) HeaderText="Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.BonusRate) HeaderText="Bonus Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalWorkingHours) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimeHours) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalPay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimePay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalBonusPay) HeaderText="TotalBonusPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalSickPay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridTemplates>
                                <DetailTemplate>
                                    @{
                                        var payrollDetail = (context as PayrollViewModel).PayrollDetailList;
                                        <SfGrid TValue="PayrollDetailViewModel" DataSource="@payrollDetail">
                                            <GridColumns>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DayOfWeek) HeaderText="Day Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.Date) HeaderText="Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyStartTime) HeaderText="Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyEndTime) HeaderText="End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalWorkingHourCurrentDay) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimeHourCurrentDay) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalPayCurrentDay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimePayCurrentDay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalSickPayCurrentDay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    }
                                </DetailTemplate>
                            </GridTemplates>
                        </GridColumns>
                    </SfGrid>
                </div>
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Payroll History"></TabHeader>
            </ChildContent>
            <ContentTemplate>

            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>
<style>
    tr.collapse.in {
        display: table-row;
    }
</style>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    private List<Object> ToolbarItems = new List<Object>() { "Search" };
    List<TimesheetData> _Timesheets;

    private SfGrid<PayrollViewModel> Grid;
    private SfGrid<PayrollViewModel> _attendanceGrid;
    private int _folderId = 1;
    private List<Object> Toolbaritems = new List<Object>() { "Search", "Print" };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();
    private List<Holiday> SelectedHolidays = new List<Holiday>();
    private List<SickLeave> SelectedSickLeaves = new List<SickLeave>();

    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };
    List<PayrollViewModel> payrollList = new List<PayrollViewModel>();
    List<PayrollViewModel> _attendance;

    DateTime _fromDate = DateTime.Now;
    DateTime _toDate = DateTime.Now;
    string _department = "All";
    private List<Employee> employees = new List<Employee>();

    decimal _TotalAmount = 0;

    protected override async Task OnInitializedAsync()
    {
        departmentListFilter = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);
        employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);

    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            //_Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        _department = args.Value;
    }

    private async Task Export()
    {
        if (!payrollList.Any())
        {
            return;
        }

        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.DataSource = payrollList;

        var columns = new List<GridColumn>();

        columns.Add(new GridColumn() { Field = "Name" });
        columns.Add(new GridColumn() { Field = "Rate" });
        columns.Add(new GridColumn() { Field = "TotalWorkingHours" });
        columns.Add(new GridColumn() { Field = "TotalPay" });


        ExcelProperties.Columns = columns;
        ExcelProperties.FileName = "DailySummary.xlsx";

        await this.Grid.ExcelExport(ExcelProperties);
    }

    private async Task Create()
    {
        ShowProgressIndicator();

        if (DateTime.Compare(_fromDate, _toDate) > 0)
        {
            AddModuleMessage("Invalid Date Range", MessageType.Error);
            return;
        }

        _TotalAmount = 0;
        payrollList.Clear();

        TimesheetDailyQuery timesheetDailyQuery = new TimesheetDailyQuery();
        timesheetDailyQuery.FromDate = _fromDate;
        timesheetDailyQuery.ToDate = _toDate;
        timesheetDailyQuery.Department = _department;
        timesheetDailyQuery.EmployeeName = string.Empty;
        timesheetDailyQuery.IsWarning = false;
        timesheetDailyQuery.IsMultiCheckin = false;
        timesheetDailyQuery.AttendanceStatus = "All";
        if (SelectedHolidays != null)
        {
            timesheetDailyQuery.Holidays = SelectedHolidays;
        }

        if (SelectedSickLeaves != null)
        {
            timesheetDailyQuery.SickLeaves = SelectedSickLeaves;
        }

        _attendance = await TimesheetService.GetPayrollDataAsync(ModuleState.ModuleId, timesheetDailyQuery);

        _attendance = _attendance.OrderBy(x => x.Department).ThenBy(x => x.Name).ToList();

        _TotalAmount = _attendance.Sum(x => x.TotalPay + x.TotalBonusPay + x.TotalOvertimePay);

        _attendanceGrid.Refresh();
        HideProgressIndicator();
    }
}

