@namespace Gearment.Timesheet
@using Gearment.Timesheet.Services
@using Gearment.Employee.Services
@using Gearment.Employee.Models
@using Gearment.Timesheet.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Gearment.Department.Models
@using System.IO;
@using Syncfusion.XlsIO;
@using Syncfusion.Drawing;

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITimesheetService TimesheetService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IEmployeeService EmployeeService
@inject Microsoft.JSInterop.IJSRuntime JS

<SfTab CssClass="BlazorTab" LoadOn="ContentLoad.Demand">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="New Payroll"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <br />
                <div class="form-group row">
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>From Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_fromDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>To Date</label>
                        <SfDatePicker TValue="DateTime" Width="100%" @bind-Value="@_toDate"></SfDatePicker>
                    </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <label>Department</label>
                        <SfDropDownList TValue="string" TItem="DepartmentViewModel" Placeholder="All" DataSource="@departmentListFilter">
                            <DropDownListEvents ValueChange="@FilterChange" TValue="string" TItem="DepartmentViewModel"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <Section Name="Holidays" Heading="Bonus on Holidays">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.BonusQueryComponent FromDate="@_fromDate" ToDate="@_toDate" SelectedDates="@SelectedHolidays" />
                        </div>
                    </div>
                </Section>
                <br />
                <Section Name="SickLeave" Heading="Sick Leaves">
                    <div class="form-group row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <Oqtane.Modules.Gearment_Timesheet.SickLeaveComponent Employees="@employees" DepartmentListFilter="@departmentListFilter" SelectedDates="@SelectedSickLeaves" />
                        </div>
                    </div>
                </Section>
                <br />
                <SfButton OnClick="Create" class="btn btn-primary" Content="Create"></SfButton>
                <SfButton OnClick="Export" class="btn btn-secondary" Content="Export"></SfButton>
                <br /><br />
                <div class="form-group row">
                    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                        <div class="alert alert-primary" role="alert">
                            Total Payment Amount <a href="#" class="alert-link"> $@_TotalAmount</a>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <SfGrid DataSource="@_attendance" @ref="_attendanceGrid" AllowResizing="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="ToolbarItems">
                        <GridPageSettings PageSizes="new int[] { 5, 10, 50, 100 }"></GridPageSettings>
                        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="PayrollViewModel"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(PayrollViewModel.Id) HeaderText="ID" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Department) HeaderText="Department" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.Rate) HeaderText="Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.BonusRate) HeaderText="Bonus Rate" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalWorkingHours) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimeHours) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalPay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalOvertimePay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalBonusHours) HeaderText="TotalBonusPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalBonusPay) HeaderText="TotalBonusPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(PayrollViewModel.TotalSickPay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                            <GridTemplates>
                                <DetailTemplate>
                                    @{
                                        var payrollDetail = (context as PayrollViewModel).PayrollDetailList;
                                        <SfGrid TValue="PayrollDetailViewModel" DataSource="@payrollDetail">
                                            <GridColumns>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DayOfWeek) HeaderText="Day Of Week" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.Date) HeaderText="Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyStartTime) HeaderText="Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.DailyEndTime) HeaderText="End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakStartTime) HeaderText="Break Start" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.BreakEndTime) HeaderText="Break End" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalWorkingHourCurrentDay) HeaderText="TotalWorkingHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimeHourCurrentDay) HeaderText="TotalOvertimeHours" Type="ColumnType.Number" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalPayCurrentDay) HeaderText="TotalPay" Format="c2" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalOvertimePayCurrentDay) HeaderText="TotalOvertimePay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(PayrollDetailViewModel.TotalSickPayCurrentDay) HeaderText="TotalSickPay" Format="c2" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    }
                                </DetailTemplate>
                            </GridTemplates>
                        </GridColumns>
                    </SfGrid>
                </div>
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Payroll History"></TabHeader>
            </ChildContent>
            <ContentTemplate>

            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>
<style>
    tr.collapse.in {
        display: table-row;
    }
</style>


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<TimesheetData> _Timesheets;

    private SfGrid<PayrollViewModel> Grid;
    private SfGrid<PayrollViewModel> _attendanceGrid;
    private int _folderId = 1;
    private List<Object> ToolbarItems = new List<Object>() { "Search", "Print", new ItemModel() { Text = "Payroll Report", TooltipText = "Payroll Report", PrefixIcon = "Excel_Export" } };

    private bool ImportExcelDialogEnable { get; set; } = false;
    List<TimesheetDataExcelExport> exportData = new List<TimesheetDataExcelExport>();
    private List<Holiday> SelectedHolidays = new List<Holiday>();
    private List<SickLeave> SelectedSickLeaves = new List<SickLeave>();

    List<DepartmentViewModel> departmentListFilter = new List<DepartmentViewModel>() { new DepartmentViewModel() { DepartmentId = 0, Name = "All" } };
    List<PayrollViewModel> payrollList = new List<PayrollViewModel>();
    List<PayrollViewModel> _attendance;

    DateTime _fromDate = DateTime.Now;
    DateTime _toDate = DateTime.Now;
    string _department = "All";
    private List<Employee> employees = new List<Employee>();

    decimal _TotalAmount = 0;

    protected override async Task OnInitializedAsync()
    {
        departmentListFilter = await EmployeeService.GetDepartmentsAsync(ModuleState.ModuleId);
        employees = await EmployeeService.GetAllEmployeesAsync(ModuleState.ModuleId);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Payroll Report") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            ExportProperties.IncludeHiddenColumn = true;
            ExportProperties.FileName = "Payroll-" + _fromDate.ToString("MMddyyyy") + "-" + _toDate.ToString("MMddyyyy") + ".xlxs";
            await this._attendanceGrid.ExcelExport(ExportProperties);
        }
    }

    private async Task Delete(int TimesheetDataId)
    {
        try
        {
            await TimesheetService.DeleteTimesheetAsync(TimesheetDataId, ModuleState.ModuleId);
            await logger.LogInformation("Timesheet Deleted {Timesheet}", TimesheetDataId);
            //_Timesheets = await TimesheetService.GetTimesheetsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Timesheet {Timesheet} {Error}", TimesheetDataId, ex.Message);
            AddModuleMessage("Error Deleting Timesheet", MessageType.Error);
        }
    }

    private async Task FilterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DepartmentViewModel> args)
    {
        _department = args.Value;
    }

    private async Task Export()
    {
        ShowProgressIndicator();
        if (_attendance != null)
        {
            //MemoryStream excelStream = await TimesheetService.ExportPayrollDataAsync(ModuleState.ModuleId, _attendance);
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
                IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2013;

                //Create a workbook
                IWorkbook workbook = application.Workbooks.Create(1);
                IWorksheet worksheet = workbook.Worksheets[0];
                worksheet.Name = "Summary";
                worksheet.EnableSheetCalculations();

                worksheet.Range["A1"].Text = "Holidays: " + SelectedHolidays.Count().ToString();
                worksheet.Range["A1"].CellStyle.Font.Bold = true;

                if (SelectedHolidays.Any())
                {
                    worksheet.Range["A1"].Text = string.Join(";", SelectedHolidays.Select(x => x.Date.ToString("MM/dd/yyyy")));
                    worksheet.Range["A1"].CellStyle.Font.Bold = true;
                }

                worksheet.Range["A2"].Text = "Total Amount";
                worksheet.Range["A2"].CellStyle.Font.Bold = true;
                worksheet.Range["A2"].CellStyle.Font.Color = ExcelKnownColors.Red;
                worksheet.Range["B2"].Number = (double)_TotalAmount;
                worksheet.Range["B2"].NumberFormat = "$.00";
                worksheet.Range["B2"].CellStyle.Font.Bold = true;
                worksheet.Range["B2"].CellStyle.Font.Color = ExcelKnownColors.Red;

                int startRowIndex = 3;
                int departmentCount = departmentListFilter.Count();

                for (int i = 0; i < departmentCount; i++)
                {
                    int currentRowIndex = i + startRowIndex;
                    worksheet.Range["A" + currentRowIndex].Text = departmentListFilter[i].Name.ToString();
                    worksheet.Range["A" + currentRowIndex].CellStyle.Font.Bold = true;

                    worksheet.Range["B" + currentRowIndex].Number = (double)_attendance.Where(x => x.Department == departmentListFilter[i].Name.ToString()).Sum(x => x.TotalPay + x.TotalOvertimePay + x.TotalBonusPay);
                    worksheet.Range["B" + currentRowIndex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["B" + currentRowIndex].CellStyle.Font.Bold = true;
                    worksheet.Range["B" + currentRowIndex].NumberFormat = "$.00";
                }

                int headerRowIndex = startRowIndex + departmentCount + 1;

                worksheet.Range["A" + headerRowIndex].Text = "Name";
                worksheet.Range["A" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["B" + headerRowIndex].Text = "Department";
                worksheet.Range["B" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["C" + headerRowIndex].Text = "DayOfWeek";
                worksheet.Range["C" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["D" + headerRowIndex].Text = "Date";
                worksheet.Range["D" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["E" + headerRowIndex].Text = "Start";
                worksheet.Range["E" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["F" + headerRowIndex].Text = "End";
                worksheet.Range["F" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["G" + headerRowIndex].Text = "Break Start";
                worksheet.Range["G" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["H" + headerRowIndex].Text = "Break End";
                worksheet.Range["H" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["I" + headerRowIndex].Text = "Total Rest Hrs";
                worksheet.Range["I" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["J" + headerRowIndex].Text = "Total Working Hrs";
                worksheet.Range["J" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["K" + headerRowIndex].Text = "Sick Leave Hrs";
                worksheet.Range["K" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["L" + headerRowIndex].Text = "Rate";
                worksheet.Range["L" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["M" + headerRowIndex].Text = "Normal Hrs";
                worksheet.Range["M" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["N" + headerRowIndex].Text = "Overtime";
                worksheet.Range["N" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["O" + headerRowIndex].Text = "Bonus Hrs";
                worksheet.Range["O" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["p" + headerRowIndex].Text = "Sick Leave Hrs";
                worksheet.Range["P" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["Q" + headerRowIndex].Text = "Normal Pay";
                worksheet.Range["Q" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["R" + headerRowIndex].Text = "OT Pay";
                worksheet.Range["R" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["S" + headerRowIndex].Text = "Bonus Pay";
                worksheet.Range["S" + headerRowIndex].CellStyle.Font.Bold = true;
                worksheet.Range["T" + headerRowIndex].Text = "Total";
                worksheet.Range["T" + headerRowIndex].CellStyle.Font.Bold = true;

                int dataStartRow = headerRowIndex + 1;

                foreach (var item in _attendance)
                {
                    for (int i = 0; i < item.PayrollDetailList.Count; i++)
                    {
                        int currentRow = dataStartRow + i;
                        worksheet.Range["A" + currentRow].Text = item.Name;
                        worksheet.Range["B" + currentRow].Text = item.Department;
                        worksheet.Range["C" + currentRow].Text = item.PayrollDetailList[i].DayOfWeek;
                        worksheet.Range["D" + currentRow].Value = item.PayrollDetailList[i].Date.ToString("MM/dd/yyyy");
                        worksheet.Range["E" + currentRow].Text = item.PayrollDetailList[i].DailyStartTime;
                        worksheet.Range["F" + currentRow].Text = item.PayrollDetailList[i].DailyEndTime;
                        worksheet.Range["G" + currentRow].Text = item.PayrollDetailList[i].BreakStartTime;
                        worksheet.Range["H" + currentRow].Text = item.PayrollDetailList[i].BreakEndTime;
                        worksheet.Range["I" + currentRow].Number = (double)item.PayrollDetailList[i].TotalBreakHourCurrentDay;
                        worksheet.Range["J" + currentRow].Formula = "=SUM(M" + currentRow + ",N" + currentRow + ")";

                        worksheet.Range["L" + currentRow].Number = (double)item.Rate;
                        worksheet.Range["M" + currentRow].Number = (double)item.PayrollDetailList[i].TotalWorkingHourCurrentDay;

                        worksheet.Range["N" + currentRow].Number = (double)item.PayrollDetailList[i].TotalOvertimeHourCurrentDay;
                        if (item.PayrollDetailList[i].TotalOvertimeHourCurrentDay != 0)
                        {
                            worksheet.Range["N" + currentRow].CellStyle.Font.Color = ExcelKnownColors.Red;
                        }

                        worksheet.Range["Q" + currentRow].Number = (double)item.PayrollDetailList[i].TotalPayCurrentDay;
                        worksheet.Range["Q" + currentRow].NumberFormat = "$.00";
                        worksheet.Range["R" + currentRow].Number = (double)item.PayrollDetailList[i].TotalOvertimePayCurrentDay;
                        worksheet.Range["R" + currentRow].NumberFormat = "$.00";
                        worksheet.Range["S" + currentRow].Number = (double)item.PayrollDetailList[i].TotalBonusPayCurrentDay;
                        worksheet.Range["S" + currentRow].NumberFormat = "$.00";
                    }

                    int totalRowindex = dataStartRow + item.PayrollDetailList.Count;

                    worksheet.Range["A" + totalRowindex].Text = item.Name;
                    worksheet.Range["A" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["A" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["A" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["B" + totalRowindex].Text = item.Department;
                    worksheet.Range["B" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["B" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["B" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;


                    worksheet.Range["J" + totalRowindex].Formula = SumFormulaString("J", dataStartRow, dataStartRow + item.PayrollDetailList.Count - 1);
                    worksheet.Range["J" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["J" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["J" + totalRowindex].CellStyle.Font.Size = 13;

                    if (item.TotalSickPay != 0)
                    {
                        worksheet.Range["K" + totalRowindex].Number = (double)item.TotalSickHours;
                        worksheet.Range["K" + totalRowindex].CellStyle.Font.Bold = true;
                        worksheet.Range["K" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                        worksheet.Range["K" + totalRowindex].CellStyle.Font.Size = 13;
                        worksheet.Range["K" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 235, 245);

                        worksheet.Range["P" + totalRowindex].Formula = "=K" + totalRowindex + "*L" + totalRowindex;
                        worksheet.Range["p" + totalRowindex].NumberFormat = "$.00";
                        worksheet.Range["P" + totalRowindex].CellStyle.Font.Bold = true;
                        worksheet.Range["P" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                        worksheet.Range["P" + totalRowindex].CellStyle.Font.Size = 13;
                        worksheet.Range["P" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 235, 245);
                    }

                    worksheet.Range["L" + totalRowindex].Number = (double)item.Rate;
                    worksheet.Range["L" + totalRowindex].NumberFormat = "$.00";
                    worksheet.Range["L" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["L" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["L" + totalRowindex].CellStyle.Font.Size = 13;

                    worksheet.Range["M" + totalRowindex].Formula = SumFormulaString("M", dataStartRow, dataStartRow + item.PayrollDetailList.Count - 1);
                    worksheet.Range["M" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["M" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["M" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["M" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 215, 238);

                    worksheet.Range["N" + totalRowindex].Formula = SumFormulaString("N", dataStartRow, dataStartRow + item.PayrollDetailList.Count - 1);
                    worksheet.Range["N" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["N" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["N" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["N" + totalRowindex].CellStyle.Color = Color.FromArgb(248, 203, 173);

                    worksheet.Range["O" + totalRowindex].Number = (double)item.TotalBonusHours;
                    worksheet.Range["O" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["O" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["O" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["O" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 224, 180);

                    worksheet.Range["Q" + totalRowindex].Formula = "=L" + totalRowindex + "*M" + totalRowindex;
                    worksheet.Range["Q" + totalRowindex].NumberFormat = "$.00";
                    worksheet.Range["Q" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["Q" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["Q" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["Q" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 215, 238);

                    worksheet.Range["R" + totalRowindex].Formula = "=L" + totalRowindex + "*N" + totalRowindex + "*1.5";
                    worksheet.Range["R" + totalRowindex].NumberFormat = "$.00";
                    worksheet.Range["R" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["R" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["R" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["R" + totalRowindex].CellStyle.Color = Color.FromArgb(248, 203, 173);

                    worksheet.Range["S" + totalRowindex].Formula = "=O" + totalRowindex + "*L" + totalRowindex;
                    worksheet.Range["S" + totalRowindex].NumberFormat = "$.00";
                    worksheet.Range["S" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["S" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["S" + totalRowindex].CellStyle.Font.Size = 13;
                    worksheet.Range["S" + totalRowindex].CellStyle.Color = Color.FromArgb(198, 224, 180);

                    worksheet.Range["T" + totalRowindex].Formula = "=SUM(P" + totalRowindex + ":S" + totalRowindex + ")";
                    worksheet.Range["T" + totalRowindex].NumberFormat = "$.00";
                    worksheet.Range["T" + totalRowindex].CellStyle.Font.Bold = true;
                    worksheet.Range["T" + totalRowindex].CellStyle.Font.Color = ExcelKnownColors.Red;
                    worksheet.Range["T" + totalRowindex].CellStyle.Font.Size = 13;

                    dataStartRow += item.PayrollDetailList.Count() + 1;
                }

                worksheet.Range["A1"].ColumnWidth = 28;
                worksheet.Range["B1"].ColumnWidth = 22;
                worksheet.Range["C1"].ColumnWidth = 12;
                worksheet.Range["D1"].ColumnWidth = 12;
                worksheet.Range["E1"].ColumnWidth = 10;
                worksheet.Range["F1"].ColumnWidth = 10;
                worksheet.Range["G1"].ColumnWidth = 10;
                worksheet.Range["H1"].ColumnWidth = 10;
                worksheet.Range["I1"].ColumnWidth = 13;
                worksheet.Range["J1"].ColumnWidth = 17;
                worksheet.Range["K1"].ColumnWidth = 16;
                worksheet.Range["L1"].ColumnWidth = 12;
                worksheet.Range["M1"].ColumnWidth = 12;
                worksheet.Range["N1"].ColumnWidth = 12;
                worksheet.Range["O1"].ColumnWidth = 12;
                worksheet.Range["P1"].ColumnWidth = 13;
                worksheet.Range["Q1"].ColumnWidth = 20;
                worksheet.Range["R1"].ColumnWidth = 18;
                worksheet.Range["S1"].ColumnWidth = 18;
                worksheet.Range["T1"].ColumnWidth = 18;

                //Save the document as a stream and retrun the stream.
                using (MemoryStream stream = new MemoryStream())
                {
                    //Save the created Excel document to MemoryStream
                    workbook.SaveAs(stream);

                    //Download the excel file
                    await JS.SaveAs("Payroll-" + _fromDate.ToString("MMddyyyy") + "-" + _toDate.ToString("MMddyyyy") + ".xlsx", stream.ToArray());
                }
            }
        }

        HideProgressIndicator();
    }

    private string SumFormulaString(string columnName, int startRow, int endRow)
    {
        string result = "SUM(" + columnName + startRow + ":" + columnName + endRow + ")";
        return result;
    }

    private async Task Create()
    {
        ShowProgressIndicator();

        if (DateTime.Compare(_fromDate, _toDate) > 0)
        {
            AddModuleMessage("Invalid Date Range", MessageType.Error);
        }
        else
        {
            _TotalAmount = 0;
            payrollList.Clear();

            TimesheetDailyQuery timesheetDailyQuery = new TimesheetDailyQuery();
            timesheetDailyQuery.FromDate = _fromDate;
            timesheetDailyQuery.ToDate = _toDate;
            timesheetDailyQuery.Department = _department;
            timesheetDailyQuery.EmployeeName = string.Empty;
            timesheetDailyQuery.IsWarning = false;
            timesheetDailyQuery.IsMultiCheckin = false;
            timesheetDailyQuery.AttendanceStatus = "All";
            if (SelectedHolidays != null)
            {
                timesheetDailyQuery.Holidays = SelectedHolidays;
            }

            if (SelectedSickLeaves != null)
            {
                timesheetDailyQuery.SickLeaves = SelectedSickLeaves;
            }

            _attendance = await TimesheetService.GetPayrollDataAsync(ModuleState.ModuleId, timesheetDailyQuery);

            _attendance = _attendance.OrderBy(x => x.Department).ThenBy(x => x.Name).ToList();

            _TotalAmount = _attendance.Sum(x => x.TotalPay + x.TotalBonusPay + x.TotalOvertimePay);

            _attendanceGrid.Refresh();
        }


        HideProgressIndicator();
    }
}

