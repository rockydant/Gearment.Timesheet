@namespace Gearment.Timesheet

@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IFolderService FolderService

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="upload" HelpText="Upload the file you want" ResourceKey="Upload">Upload: </Label>
        </td>
        <td>
            <FileManager UploadMultiple="true" ShowFolders="false" ShowFiles="false" FolderId="@_folderId" Filter="csv,xls,xlsx" OnUploadCompleted="GetFiles" />
        </td>
    </tr>
</table>
<SfGrid DataSource="@_files" AllowPaging="true" AllowSorting="true">
    <GridColumns>
        <GridColumn Field=@nameof(File.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(File.FileId) HeaderText="ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn Field=@nameof(File.FolderId) HeaderText="Folder ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn Field=@nameof(File.CreatedOn) HeaderText="Folder ID" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Left" Width="120">
            <Template>
                @{ var file = (context as File);
                    <td><ActionDialog Header="Delete File" Message="@("Are You Sure You Wish To Delete The " + file.Name + " Timesheet?")" Action="Delete" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteFile(file))" ResourceKey="DeleteFile" /></td>
                    <td><button class="btn btn-info" @onclick="@(async () => await ProcessFile(file))">Process</button></td>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>
<br />
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>

@code { private string url = string.Empty;
    private int _folderId = -1;
    private List<File> _files { get; set; }
    List<string> _fileType = new List<string>() { "csv", "xls", "xlsx" };

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        ShowProgressIndicator();
        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);


            await GetFiles();
        }

    }

    private async Task GetFiles()
    {
        _files = await FileService.GetFilesAsync(_folderId);
        _files = _files.FindAll(x => _fileType.Contains(x.Extension));
        HideProgressIndicator();
    }

    private async Task DeleteFile(File file)
    {
        try
        {
            await FileService.DeleteFileAsync(file.FileId);
            await logger.LogInformation("File Deleted {File}", file.Name);
            AddModuleMessage("File " + file.Name + " Deleted", MessageType.Success);
            await GetFiles();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting File {File} {Error}", file.Name, ex.Message);
            AddModuleMessage("File " + file.Name + " Deleted", MessageType.Error);
        }
    }

    private async Task ProcessFile(File file)
    {
        try
        {
            await FileService.ProcessFileAsync(file.FileId);
            await logger.LogInformation("File Processed {File}", file.Name);
            AddModuleMessage("File " + file.Name + " Processed", MessageType.Success);
            await GetFiles();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Process File {File} {Error}", file.Name, ex.Message);
            AddModuleMessage("File " + file.Name + " Processed", MessageType.Error);
        }
    }

}
